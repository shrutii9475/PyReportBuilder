20june 
i created the signup and signin python script. it is only the front end part.      will add functionality later.

21june
connected signin and signup to database.

22june 
Added the home page connected to signin.

23june
completed the home page user interface and linked to signin page.
* difficulty in making the image button while opening after the signin.

Start
├─ Import Required Modules
│
├─ Define Function login_user()
│   ├─ Check if username or password is empty
│   │   └─ Show error message "All fields are required!"
│   └─ Establish database connection
│       ├─ Show error message "Connection is not established!" if connection fails
│       ├─ Execute "use userdata" query
│       └─ Execute SELECT query with entered username and password
│           ├─ If no rows are returned
│           │   └─ Show error message "Invalid username or password"
│           └─ Else
│               └─ Show success message "Login is Successful!"
│                   ├─ Create instance of HomePage
│                   ├─ Call run() method of HomePage
│                   └─ Hide login window
│
├─ Define Function signup_page()
│   └─ Destroy login window
│       └─ Import signup module and open signup page
│
├─ Define Function on_entry(event)
│   └─ If username Entry is clicked and contains default text "Username"
│       └─ Clear the default text
│
├─ Define Function on_entry1(event)
│   └─ If password Entry is clicked and contains default text "Password"
│       └─ Clear the default text
│
├─ Define Function hide()
│   └─ Change eye button image to closed eye
│       └─ Set password Entry to show asterisks
│
├─ Define Function show()
│   └─ Change eye button image to open eye
│       └─ Set password Entry to show plaintext
│
├─ Create Login Window
│   ├─ Set window title, size, and background image
│   ├─ Create and place GUI components
│   ├─ Associate callbacks with buttons and entry widgets
│   └─ Enter event loop with mainloop()
│
└─ End

Start
│
├─ Define class HomePage
│   │
│   ├─ Define __init__() method
│   │   ├─ Initialize the login window attribute
│   │   └─ Create and configure the home window
│   │
│   ├─ Define update_dropdown2() method
│   │   └─ Determine the selected option from dropdown1
│   │       ├─ Based on the option, update options_list2
│   │       └─ Update dropdown2 values and set default selection
│   │
│   ├─ Define logout() method
│   │   ├─ Destroy the home window
│   │   └─ Display the login window
│   │
│   └─ Define run() method
│       └─ Run the home window event loop
│
├─ Check if the current module is the main module
│   ├─ Create an instance of HomePage (with a login window as a parameter)
│   └─ Run the home page
│
└─ End

have partially completed the home page.

Start
|
|--> Create GUI window
|    |
|    |--> Set window properties (title, size, etc.)
|    |--> Set background color
|    |--> Create and display the "Report Generator" heading label
|    |--> Create and display the "Log Out" button
|    |--> Create frames (frame1 and frame2)
|    |--> Call the menu method to create the menu bar
|    |--> Call the GUIofapp method to create GUI components
|
|--> Define method: GUIofapp
|    |
|    |--> Create frame1
|    |    |
|    |    |--> Set frame properties (background, border, size)
|    |    |--> Create and display the "Upload Excel File" heading label
|    |    |--> Create and display the "Choose a File" button
|    |    |--> Create a label to display the selected filename
|    |    |--> Create and display the "Upload to Database" button
|    |
|    |--> Create frame2
|    |    |
|    |    |--> Set frame properties (background, border, size)
|    |    |--> Create and display the "Generate Report" heading label
|    |    |--> Create and display the "Select options from Dropdown" subheading label
|    |    |--> Create the first dropdown menu
|    |    |--> Create the second dropdown menu
|    |    |--> Create and display the "Generate" button
|
|--> Define method: update_dropdown2
|    |
|    |--> Get the selected option from the first dropdown
|    |--> Based on the selected option:
|    |    |--> Update the options in the second dropdown
|    |    |--> Set the second dropdown to the default value
|
|--> Define method: menu
|    |
|    |--> Define the functions for menu options (myfun and quitw)
|    |--> Create the menu bar
|    |    |--> Add the "File" menu option
|    |    |--> Add the "Quit" menu option
|    |    |--> Add the "Help" menu option
|
|--> Define method: open_file
|    |
|    |--> Open a file dialog to select an Excel file
|    |--> If a file is selected:
|    |    |    
|    |    |--> Read the data from the file using pandas
|    |    |    
|    |    |--> If the file is empty
|    |    |    |--> Display an error message
|    |    |--> If the file has data:
|    |    |    |--> Display the selected filename
|    |    |    |--> Display a success message
|    |    |
|    |--> If no file is selected:
|    |    |
|    |    |--> Display a failure message
|    
|--> Define method: send_data_to_database
|    |
|    |--> Connect to the MySQL database
|    |    |
|    |    |--> Set the connection parameters (host, username, password, database)
|    |    |--> Create a connection object
|    |    |--> Create a cursor object
|    |
|    |--> Define the INSERT query
|    |
|    |--> Initialize a success count variable
|    |
|    |--> Iterate over the rows in the Excel data
|    |    |
|    |    |--> Create an empty list to store record data
|    |    |--> Iterate over the columns in the row
|    |    |    |
|    |    |    |--> Skip the 'SNo' column
|    |    |    |--> Get the value from the column
|    |    |    |--> Handle NaN values
|    |    |    |--> Append the value to the record data list
|    |    |
|    |    |--> Execute the INSERT query with record data
|    |    |--> Commit the changes to the database
|    |    |--> Increment the success count
|    |    |--> Handle exceptions (display error if any)
|    |
|    |--> Close the cursor and database connection
|    |
|    |--> Check the success count
|    |    |
|    |    |--> If success count is zero: Display an error message
|    |    |--> If success count is non-zero: Display a success message with the count
|
|--> Define method: fetch_data
|    |
|    |--> Placeholder: No implementation provided
|
|--> Define method: generate_report
|    |
|    |--> Placeholder: No implementation provided
|
|--> Define method: logout
|    |
|    |--> Destroy the home window
|    |--> Show the login window
|
End

# Example usage:
if __name__ == "__main__":
    # home_page = HomePage(login_window)
    home_page = HomePage()
    home_page.run()

|--> Define method: run
|    |
|    |--> Run the main event loop of the home window
|
|--> Check if the module is being run as the main script
|    |
|    |--> If the condition is true:
|    |    |
|    |    |--> Create an instance of the HomePage class
|    |    |--> Run the `run` method of the home_page instance
|    |
|    |--> If the condition is false:
|    |    |
|    |    |--> Do nothing
|
End



06/07/23
Added the files in git github.

07072023

updated def send_data_to_database

10/07/23

updated def fetch_data, def search_date

To search for a date in a MySQL database table named sampledb with a column named TrainingProgramDate2, you can use the DATE or DATE_FORMAT function along with the desired date format. Here are four examples of SQL queries to search for a date:

Search for an exact date:
sql
Copy code
SELECT * FROM sampledb WHERE DATE(TrainingProgramDate2) = '2023-07-01';
Search for a date range:
sql
Copy code
SELECT * FROM sampledb WHERE TrainingProgramDate2 BETWEEN '2023-07-01' AND '2023-07-31';
Search for dates before a specific date:
sql
Copy code
SELECT * FROM sampledb WHERE TrainingProgramDate2 < '2023-07-01';
Search for dates after a specific date:
sql
Copy code
SELECT * FROM sampledb WHERE TrainingProgramDate2 > '2023-07-01';
In these examples, '2023-07-01' represents the date you want to search for. Adjust the date format according to the format stored in your database column.